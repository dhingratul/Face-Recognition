%% Function to compute F-measure
% Takes in gnd(ground truth) and index(idx) generated by clustering algorithm and
% a third optional argument(beta) for F-beta measure, by default it
% calculates F-1 measure.
function [f,P,R]=fmeasure(gnd,idx,beta)
if nargin<3
beta=1;
end
numClass=max(gnd);
numClusters=max(idx);
N=length(idx);
TP_FP=0;TP=0;FN_TN=0;outlabels=[];idxlabel=[]; clusterlabel=[]; FN=0;
TP_FP_FN_TN=nchoosek(N,2);
for k=1:numClusters
    predictedLabel=[]; clusterid=[];
    temp=find(idx==k);
    for i=1:size(temp,1)
        predictedLabel(i,1)=gnd(temp(i,1));
    end
    A=unique(predictedLabel); %Unique clusters
    out = [A,histc(predictedLabel(:),A)]; % Frequency of each unique cluster
    for iter=1:size(out,1)
        if(out(iter,2)>1)
            TP=TP+nchoosek(out(iter,2),2);
        end
    end
    clusterid=k*ones(size(temp,1),1);
    clusterlabel=[clusterid predictedLabel];
    outlabels=[outlabels;clusterlabel]; % Data dump
    num=numel(temp);
    if num>1
        TP_FP=TP_FP+nchoosek(num,2);
    end
end
FP=TP_FP-TP;
FN_TN=TP_FP_FN_TN-TP_FP;

for k=1:numClusters
    residualLabel=outlabels;
    temp=find(outlabels(:,1)==k);
    residualLabel(1:temp(end,1),:)=[];
    for c=1:numClass
        f1=numel(find(outlabels(temp(1,1):temp(end,1),2)==c));
        f2=numel(find(residualLabel(:,2)==c));
        FN=FN+f1*f2;
    end
    
end
TN=FN_TN-FN;
P=TP/(TP+FP);
R=TP/(TP+FN);
f=(beta^2+1)*P*R/(beta^2*P+R) ;
end